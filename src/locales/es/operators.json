{"add_and_assign_operator_explanation":"(Agregar y asignar): Agrega el operando derecho al operando izquierdo y asigna el resultado al operando izquierdo.","addition_operator_explanation":"(Adición): Agrega dos operandos.","and_operator_explanation":"(Y): Devuelve verdadero si ambos operandos son verdaderos.","arithmetic_operators_description":"Estos operadores se utilizan para realizar cálculos matemáticos.","arithmetic_operators_title":"Operadores Aritméticos","assignment_operator_explanation":"(Asignación): Asigna valor de los operandos del lado derecho al operando del lado izquierdo.","assignment_operators_description":"Los operadores de asignación se utilizan para asignar valores a variables de JavaScript.","assignment_operators_title":"Operadores de Asignación","comparision_operators_description":"Los operadores de comparación se utilizan para comparar dos valores.","comparision_operators_title":"Operadores de Comparación","conditional_operator_description":"Este operador toma tres operandos y es un atajo para la declaración (if).","conditional_operator_explanation":"Si la condición es verdadera, se devuelve valuer1; de lo contrario, se devuelve el valuer2.","conditional_operator_title":"Operador Condicional (Ternario)","decrement_operator_explanation":"(Decremento): Disminuye un valor entero en uno.","divide_and_assign_operator_explanation":"(Dividir y asignar): Divide el operando izquierdo por el operando derecho y asigna el resultado al operando izquierdo.","division_operator_explanation":"(División): Divide el numerador por el denominador.","equal_to_operator_explanation":"(Igual a): Comprueba si dos valores son iguales.","greater_than_operator_explanation":"(Mayor que) Comprueba si el primer valor es mayor que el segundo.","greater_than_or_equal_operator_explanation":"(Mayor o igual que) Comprueba si el primer valor es mayor o igual que el segundo.","increment_operator_explanation":"(Incremento): Aumenta un valor entero en uno.","less_than_operator_explanation":"(Menor que) Comprueba si el primer valor es menor que el segundo.","less_than_or_equal_operator_explanation":"(Menor que) Comprueba si el primer valor es menor o igual que el segundo.","logical_operators_description":"Los operadores lógicos se utilizan con valores Booleanos (lógicos).","logical_operators_title":"Operadores Logicos","modulus_and_assign_operator_explanation":"(Módulo y asignación): toma el módulo usando dos operandos y asigna el resultado al operando izquierdo.","modulus_operator_explanation":"(Módulo): Devuelve el resto de la división.","multiplication_operator_explanation":"(Multiplicación): Multiplica ambos operandos.","multiply_and_assign_operator_explanation":"(Multiplicar y asignar): Multiplica el operando derecho por el operando izquierdo y asigna el resultado al operando izquierdo.","not_equal_to_operator_explanation":"(No igual a): Comprueba si dos valores no son iguales.","not_operator_explanation":"(NOT): Devuelve el valor opuesto del valor de verdad del operando.","operators_additional_concepts_explanation_oa":"Asociatividad de operadores: define cómo se agrupan los operadores del mismo tipo (con la misma precedencia) en ausencia de paréntesis. Por ejemplo, en 100/10/2, la asociatividad de izquierda a derecha del operador de división significa que la operación se resuelve como (100/10)/2.","operators_additional_concepts_explanation_op":"Precedencia de operadores: la regla que determina el orden en el que se realizan las operaciones en una expresión compleja. Por ejemplo, en la expresión 3 + 4 * 5, el operador de multiplicación tiene mayor prioridad que la suma, por lo que se ejecuta primero.","operators_additional_concepts_explanation_se":"Evaluación de cortocircuito: algunos operadores lógicos como && (Y lógico) y || (OR lógico) no evalúa el segundo operando si el resultado ya se puede determinar con el primero. Esto es útil para prevenir errores de tiempo de ejecución y mejorar la eficiencia del programa.","operators_additional_concepts_title":"Conceptos Adicionales Relacionados con los Operadores","operators_conclusion":"Los operadores son, por lo tanto, herramientas indispensables en la programación, ya que permiten desde cálculos simples hasta controlar una lógica de decisión compleja en el software. Una comprensión y un uso adecuados de ellos son cruciales para cualquier desarrollador.","operators_importance_explanation_cpf":"Control del flujo del programa: los operadores lógicos y de comparación son esenciales en la toma de decisiones del programa, como en declaraciones condicionales (if) y bucles (for, while), donde controlan si un bloque de código debe ejecutarse o repetirse.","operators_importance_explanation_dm":"Manipulación de datos: todos los programas manipulan datos de alguna manera, y los operadores son herramientas esenciales para realizar esta manipulación de manera efectiva, como ajustar valores de variables o realizar operaciones entre ellos.","operators_importance_explanation_ec":"Expresividad y Concisión: Los operadores permiten escribir expresiones complejas de forma concisa y legible, facilitando tanto el desarrollo como el mantenimiento del código.","operators_importance_title":"Importancia de los Operadores en la Programación","operators_main_function_explanation":"La función principal de los operadores es permitir la ejecución de operaciones matemáticas, lógicas, de comparación, de asignación y de otro tipo sobre variables y valores. Esto incluye todo, desde operaciones básicas como suma y resta hasta operaciones más complejas como manipulación de bits o comparaciones lógicas. Por ejemplo, en un programa que calcula el total de una compra, se utilizarían operadores aritméticos para sumar los precios de los productos.","operators_main_function_title":"Función Principal de los Operadores","or_operator_explanation":"(O): Devuelve verdadero si al menos uno de los operandos es verdadero.","strictly_equal_to_operator_explanation":"(Estrictamente igual a): comprueba la igualdad de valores y tipos.","strictly_not_equal_to_operator_explanation":"(Estrictamente no igual a): Comprueba si dos valores no son iguales, considerando el tipo.","string_operator_description":"Dependiendo del contexto, cuando el operador de cadena se usa entre cadenas, se usa para la concatenación.","string_operator_explanation":"(Concatenación): Cuando se usa con cadenas, las concatena (une).","string_operator_title":"Operador de Cadena","subtract_and_assign_operator_explanation":"(Restar y asignar): Resta el operando derecho del operando izquierdo y asigna el resultado al operando izquierdo.","subtraction_operator_explanation":"(Resta): Resta el segundo operando del primero.","type_operator_instanceof":"Prueba si la propiedad prototipo de un constructor aparece en algún lugar de la cadena prototipo de un objeto.","type_operators_title":"Operadores de Tipo","type_operator_typeof":"Devuelve una cadena que indica el tipo de operando no evaluado."}