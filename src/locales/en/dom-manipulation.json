{
  "data": {
    "title": "DOM Manipulation",
    "description": "The DOM (Document Object Model) is a representation of the HTML document as a tree of nodes. JavaScript can interact with the DOM to modify the content, structure or style of the page.",

    "items": [
      {
        "path": "/fundamentals/javascript/dom-manipulation/select-elements",
        "title": "Select Elements",
        "description": "Selecting elements is the process of retrieving one or more elements from the DOM to manipulate them. This can be done using methods like `document.getElementById`, `document.querySelector`, and `document.querySelectorAll`."
      },
      {
        "path": "/fundamentals/javascript/dom-manipulation/elements-content-modification",
        "title": "Elements Content Manipulation",
        "description": "This involves changing the textual or HTML content of DOM elements. Common methods for this include `textContent` and `innerHTML`, allowing scripts to update, add, or remove content dynamically."
      },
      {
        "path": "/fundamentals/javascript/dom-manipulation/styles-modification",
        "title": "Styles Modification",
        "description": "Style modifications involve changing the CSS properties of elements to alter their appearance. This can be accomplished via the `style` property of DOM elements, allowing inline style changes like `element.style.backgroundColor = 'red';`."
      },
      {
        "path": "/fundamentals/javascript/dom-manipulation/add-remove-elements",
        "title": "Add or Remove Elements",
        "description": "JavaScript can dynamically add or remove elements from the DOM using methods such as `appendChild`, `insertBefore`, `removeChild`, and `replaceChild`, allowing for dynamic updates to the page layout."
      },
      {
        "path": "/fundamentals/javascript/dom-manipulation/events-handler",
        "title": "Events Handler",
        "description": "Event handling involves setting up listeners for various user interactions or browser events, like clicks or key presses, using methods like `addEventListener` or `removeEventListener`. This enables interactive and responsive web applications."
      },
      {
        "path": "/fundamentals/javascript/dom-manipulation/navigation",
        "title": "Navigation",
        "description": "Navigation through the DOM tree involves using properties like `parentNode`, `childNodes`, and `nextSibling` to traverse between different nodes in the DOM, allowing scripts to locate and manipulate specific elements efficiently."
      }
    ]
  }
}
